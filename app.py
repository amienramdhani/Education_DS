# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZL_uGcR6IfvSH_5eJzYBiarqcCiJrSyq
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load model dan preprocessing
model = joblib.load("model/gboost_model.joblib")

# Load encoder target dan scaler/encoder fitur
target_encoder = joblib.load("model/encoder_target.joblib")

# Load semua scaler dan encoder untuk fitur
numerical_pca_1 = [
    'Curricular_units_1st_sem_credited',
    'Curricular_units_1st_sem_enrolled',
    'Curricular_units_1st_sem_evaluations',
    'Curricular_units_1st_sem_approved',
    'Curricular_units_1st_sem_grade',
    'Curricular_units_1st_sem_without_evaluations',
    'Curricular_units_2nd_sem_credited',
    'Curricular_units_2nd_sem_enrolled',
    'Curricular_units_2nd_sem_evaluations',
    'Curricular_units_2nd_sem_approved',
    'Curricular_units_2nd_sem_grade',
    'Curricular_units_2nd_sem_without_evaluations',
]

numerical_pca_2 = [
    'Previous_qualification_grade',
    'Admission_grade',
    'Age_at_enrollment',
    'Unemployment_rate',
    'Inflation_rate',
    'GDP',
]

categorical_columns = [
    "Marital_status", "Application_mode", 'Application_order', "Course",
    "Daytime_evening_attendance", "Previous_qualification", "Nacionality",
    "Mothers_qualification", "Fathers_qualification", "Mothers_occupation",
    "Fathers_occupation", "Displaced", "Educational_special_needs", "Debtor",
    "Tuition_fees_up_to_date", "Gender", "Scholarship_holder", "International"
]

# Load scaler dan encoder
scalers = {col: joblib.load(f"model/scaler_{col}.joblib") for col in numerical_pca_1 + numerical_pca_2}
encoders = {col: joblib.load(f"model/encoder_{col}.joblib") for col in categorical_columns}

# Load PCA
pca_1 = joblib.load("model/pca_1.joblib")
pca_2 = joblib.load("model/pca_2.joblib")

# Streamlit UI
st.title("Prediksi Status Mahasiswa")

# Input form
with st.form("input_form"):
    inputs = {}
    for col in categorical_columns:
        options = list(encoders[col].classes_)
        inputs[col] = st.selectbox(col.replace("_", " "), options)

    for col in numerical_pca_1 + numerical_pca_2:
        inputs[col] = st.number_input(col.replace("_", " "), step=0.01)

    submitted = st.form_submit_button("Prediksi")

if submitted:
    input_df = pd.DataFrame([inputs])

    # Encoding categorical
    for col in categorical_columns:
        input_df[col] = encoders[col].transform(input_df[col])

    # Scaling numerical
    for col in numerical_pca_1 + numerical_pca_2:
        input_df[col] = scalers[col].transform(input_df[[col]])

    # PCA transformation
    pc1 = pca_1.transform(input_df[numerical_pca_1])
    pc2 = pca_2.transform(input_df[numerical_pca_2])

    pc_df = pd.DataFrame(pc1, columns=[f"pc1_{i+1}" for i in range(pc1.shape[1])])
    pc_df[[f"pc2_{i+1}" for i in range(pc2.shape[1])]] = pc2

    final_df = input_df.drop(columns=numerical_pca_1 + numerical_pca_2, axis=1).reset_index(drop=True)
    final_df = pd.concat([final_df, pc_df], axis=1)

    # Prediction
    pred = model.predict(final_df)
    pred_label = target_encoder.inverse_transform(pred)[0]

    st.success(f"Status Prediksi Mahasiswa: **{pred_label}**")